# 문제
# 정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 3가지가 있다. 합을 나타낼 때는 수를 1개 이상 사용해야 한다. 단, 같은 수를 두 번 이상 연속해서 사용하면 안 된다.
#
# 1+2+1
# 1+3
# 3+1
# 정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.
#
# 입력
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. n은 양수이며 100,000보다 작거나 같다.
#
# 출력
# 각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 1,000,000,009로 나눈 나머지를 출력한다.
# 정의: D[i][j]: i를 1,2,3의 합으로 나타내는 방법. 단, j는 마지막에 사용한 수
# 점화식: D[i] = D[i-1][2] + D[i-1][3] + D[i-2][1] + D[i-2][3] + D[i-3][1] + D[i-3][2]
import time
t = int(input())
start = time.time()
mod = 1000000009

d = [[0]*4 for _ in range(100001)]
# for _ in range(0,4):
#     d.append([0,0,0,0])
d[1][1] = 1
d[2][2] = 1
d[3][1] = 1
d[3][2] = 1
d[3][3] = 1

for i in range(4, 100001):
    d[i][1] += (d[i-1][2] + d[i-1][3])%mod
    d[i][2] += (d[i-2][1] + d[i-2][3])%mod
    d[i][3] += (d[i-3][1] + d[i-3][2])%mod

for _ in range(t):
    n = int(input())
    print(sum(d[n])%mod)

print(time.time() - start)
#(d[n][1]+d[n][2]+d[n][3])
#sum(d[n])

#큰 숫자는 계산할때도 시간이 많이 걸리니까 미리 나머지로 계산해두는 게 좋다.
#그럼 숫자가 너무 커지는 것도 미리 방지할 수 있다.
